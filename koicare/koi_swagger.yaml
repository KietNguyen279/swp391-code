openapi: 3.0.1
info:
  title: Koi Care API
  description: API documentation for your web application
  version: 1.0.0
servers:
  - url: "http://localhost:80"
    description: Production server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        201:
          description: User registered successfully
        400:
          description: Validation error
        409:
          description: Email already exists
        500:
          description: Server error

  /auth/login:
    post:
      summary: Login an existing user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
        "400":
          description: Bad Request
        "401":
          description: Unauthorized (invalid credentials)
        "500":
          description: Internal Server Error

  /auth/profile:
    get:
      summary: View user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: Successfully fetched user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        400:
          description: Invalid user ID
        401:
          description: Unauthorized access
        404:
          description: User not found
        500:
          description: Server error


    put:
      summary: Update user profile
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User profile updated successfully
        400:
          description: Validation error
        401:
          description: Unauthorized access
        500:
          description: Server error


  /koi:
    get:
      summary: Get all koi
      tags:
        - Koi
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all koi
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KoiWithOwner"

    post:
      summary: Create a new koi
      tags:
        - Koi
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                body_shape:
                  type: string
                age:
                  type: integer
                size:
                  type: number
                  format: float
                weight:
                  type: number
                  format: float
                gender:
                  type: string
                  enum: [male, female]
                breed:
                  type: string
                origin:
                  type: string
                pond_id:
                  type: integer
                user_id:
                  type: integer
              required:
                - name
                - image
                - body_shape
                - age
                - size
                - weight
                - gender
                - breed
                - origin
                - pond_id
                - user_id  
      responses:
        "201":
          description: Koi created successfully
        "400":
          description: Bad Request
        "500":
          description: Internal server error

  /koi/{id}:
    get:
      summary: Get koi by ID
      tags:
        - Koi
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi
      responses:
        "200":
          description: Koi retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KoiWithOwner"
        "404":
          description: Koi not found
        "500":
          description: Internal server error

    put:
      summary: Update koi by ID
      tags:
        - Koi
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                body_shape:
                  type: string
                age:
                  type: integer
                size:
                  type: number
                  format: float
                weight:
                  type: number
                  format: float
                pond_id:
                  type: integer
      responses:
        "200":
          description: Koi updated successfully
        "404":
          description: Koi not found
        "500":
          description: Internal server error

    delete:
      summary: Delete koi by ID
      tags:
        - Koi
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi
      responses:
        "200":
          description: Koi deleted successfully
        "404":
          description: Koi not found
        "500":
          description: Internal server error

  /koiGrowth:
    get:
      summary: Get all koi growth records
      tags:
        - Koi Growth
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all koi growth records
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    growth_date:
                      type: string
                      format: date
                    age:
                      type: integer
                    size:
                      type: number
                      format: float
                    weight:
                      type: number
                      format: float
                    koi_id:
                      type: integer
        "500":
          description: Internal server error
    post:
      summary: Create a new koi growth record
      tags:
        - Koi Growth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                growth_date:
                  type: string
                  format: date
                age:
                  type: integer
                size:
                  type: number
                  format: float
                weight:
                  type: number
                  format: float
                koi_id:
                  type: integer
      responses:
        "201":
          description: Koi growth record created successfully
        "400":
          description: Bad Request
        "500":
          description: Internal server error

  /koiGrowth/{id}:
    get:
      summary: Get koi growth record by ID
      tags:
        - Koi Growth
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi growth record
      responses:
        "200":
          description: Koi growth record retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  growth_date:
                    type: string
                    format: date
                  age:
                    type: integer
                  size:
                    type: number
                    format: float
                  weight:
                    type: number
                    format: float
                  koi_id:
                    type: integer
        "404":
          description: Koi growth record not found

    put:
      summary: Update koi growth record by ID
      tags:
        - Koi Growth
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi growth record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                growth_date:
                  type: string
                  format: date
                age:
                  type: integer
                size:
                  type: number
                  format: float
                weight:
                  type: number
                  format: float
      responses:
        "200":
          description: Koi growth record updated successfully
        "404":
          description: Koi growth record not found

  /koi/{id}/food:
    get:
      summary: Get food calculation by koi ID
      tags:
        - Koi
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi
      responses:
        "200":
          description: Koi retrieved successfully with food calculation
          content:
            application/json:
              schema:
                type: object
                properties:
                  food_required_kg_per_day:
                    type: number
                    format: float
        "404":
          description: Koi not found
        "500":
          description: Internal server error

  /pond:
    get:
      summary: Get all ponds
      tags:
        - Pond
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all ponds
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pond"
        "500":
          description: Internal server error
    post:
      summary: Create a new pond
      tags:
        - Pond
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                size:
                  type: number
                  format: float
                depth:
                  type: number
                  format: float
                volume:
                  type: number
                  format: float
                num_of_drains:
                  type: integer
                pump_capacity:
                  type: number
                  format: float
                user_id:
                  type: integer
      responses:
        "201":
          description: Pond created successfully
        "400":
          description: Bad Request
        "500":
          description: Internal server error

  /pond/{id}:
    get:
      summary: Get pond by ID
      tags:
        - Pond
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the pond
      responses:
        "200":
          description: Pond retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pond"
        "404":
          description: Pond not found
        "500":
          description: Internal server error

    put:
      summary: Update pond by ID
      tags:
        - Pond
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the pond
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                size:
                  type: number
                  format: float
                depth:
                  type: number
                  format: float
                volume:
                  type: number
                  format: float
                num_of_drains:
                  type: integer
                pump_capacity:
                  type: number
                  format: float
      responses:
        "200":
          description: Pond updated successfully
        "400":
          description: Bad Request
        "404":
          description: Pond not found
        "500":
          description: Internal server error

    delete:
      summary: Delete pond by ID
      tags:
        - Pond
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the pond
      responses:
        "200":
          description: Pond deleted successfully
        "404":
          description: Pond not found
        "500":
          description: Internal server error

  /pond/{id}/details:
    get:
      summary: Get pond details by ID
      tags:
        - Pond
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the pond
      responses:
        "200":
          description: Pond details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  pond_id:
                    type: integer
                  pond_name:
                    type: string
                  koi_count:
                    type: integer
                  salt_kg_required:
                    type: number
                    format: float
        "404":
          description: Pond not found
        "500":
          description: Internal server error

  /product:
    get:
      summary: Get all products
      tags:
        - Product
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

        "500":
          description: Internal server error
    post:
      summary: Create a new product
      tags:
        - Product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                quantity:
                  type: integer
      responses:
        "201":
          description: Product created successfully
        "400":
          description: Bad Request
        "500":
          description: Internal server error

  /product/{id}:
    get:
      summary: Get product by ID
      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the product
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
        "500":
          description: Internal server error

    put:
      summary: Update product by ID

      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                quantity:
                  type: integer
      responses:
        "200":
          description: Product updated successfully
        "404":
          description: Product not found
        "500":
          description: Internal server error

    delete:
      summary: Delete product by ID
      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the product
      responses:
        "200":
          description: Product deleted successfully
        "404":
          description: Product not found
        "500":
          description: Internal server error



  /order:
    get:
      summary: Get all orders
      tags:
        - Order
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    order_date:
                      type: string
                      format: date-time
                    user_id:
                      type: integer
                    status:
                      type: string
                      enum: [pending, processing, shipped, delivered, cancelled]
        "500":
          description: Internal server error
    post:
      summary: Create a new order
      tags:
        - Order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderItems:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: integer
                        description: ID of the product
                      quantity:
                        type: integer
                        description: Quantity of the product
                      price:
                        type: number
                        format: float
                        description: Price of the product
                    required:
                      - product_id
                      - quantity
                      - price
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  orderId:
                    type: integer
        "400":
          description: Bad Request (e.g., invalid input)
        "500":
          description: Internal server error

  /order/{id}:
    get:
      summary: Get order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the order
      responses:
        "200":
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties: # Removed total_amount
                  order_id:
                    type: integer
                  user_id:
                    type: integer
                  order_date:
                    type: string
                    format: date-time
                  status:
                    type: string
                    enum: [pending, processing, shipped, delivered, cancelled]
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: integer
                        name:
                          type: string
                        price:
                          type: number
                          format: float
                        quantity:
                          type: integer
        "404":
          description: Order not found
        "500":
          description: Internal server error

    put:
      summary: Update order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderItems:
                  type: array
                  items:
                    type: object
                    properties:
                      product_id:
                        type: integer
                      quantity:
                        type: integer
                      price:
                        type: number
                        format: float
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        "200":
          description: Order updated successfully
        "404":
          description: Order not found
        "500":
          description: Internal server error

    delete:
      summary: Delete order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the order
      responses:
        "200":
          description: Order deleted successfully
        "404":
          description: Order not found

  /newsBlog:
    get:
      summary: Get all news blogs
      tags:
        - News Blog
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all news blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NewsBlog"
        "500":
          description: Internal server error
    post:
      summary: Create a new news_blog
      tags:
        - News Blog
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                title:
                  type: string
                content:
                  type: string
                date_published:
                  type: string
                  format: date-time
      responses:
        "201":
          description: News blog created successfully
        "400":
          description: Bad Request
        "500":
          description: Internal server error

  /newsBlog/{id}:
    get:
      summary: Get news blog by ID
      tags:
        - News Blog
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the news blog
      responses:
        "200":
          description: News blog retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewsBlog"
        "404":
          description: News blog not found
        "500":
          description: Internal server error

    put:
      summary: Update news blog by ID
      tags:
        - News Blog
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the news blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                title:
                  type: string
                content:
                  type: string
                date_published:
                  type: string
                  format: date-time
      responses:
        "200":
          description: News blog updated successfully
        "400":
          description: Bad Request
        "404":
          description: News blog not found
        "500":
          description: Internal server error

    delete:
      summary: Delete news blog by ID
      tags:
        - News Blog
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the news blog
      responses:
        "200":
          description: News blog deleted successfully
        "404":
          description: News blog not found
        "500":
          description: Internal server error

  /cart:
    get:
      summary: Get cart by user ID
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart_id:
                    type: integer
                  user_id:
                    type: integer
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: integer
                        name:
                          type: string
                        price:
                          type: number
                          format: float
                        quantity:
                          type: integer
        "500":
          description: Internal server error

    post:
      summary: Add item to cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
      responses:
        "201":
          description: Item added to cart
        "400":
          description: Bad Request
        "404":
          description: Product not found
        "500":
          description: Internal server error

  /cart/{productId}:
    put:
      summary: Update item quantity in cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: ID of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        "200":
          description: Cart item quantity updated
        "500":
          description: Internal server error

    delete:
      summary: Remove item from cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: ID of the product
      responses:
        "200":
          description: Item removed from cart
        "500":
          description: Internal server error

  /waterParam:
    get:
      summary: Get all water parameters
      tags:
        - Water Parameter
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all water parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WaterParameter"
        "500":
          description: Internal server error
    post:
      summary: Create a new water parameter
      tags:
        - Water Parameter
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                measurement_time:
                  type: string
                  format: date-time
                pond_id:
                  type: integer
      responses:
        "201":
          description: Water parameter created successfully
        "400":
          description: Bad Request (e.g., invalid input)
        "500":
          description: Internal server error

  /waterParam/{id}:
    get:
      summary: Get water parameter by ID
      tags:
        - Water Parameter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the water parameter
      responses:
        "200":
          description: Water parameter retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaterParameter"
        "404":
          description: Water parameter not found
        "500":
          description: Internal server error

    put:
      summary: Update water parameter by ID
      tags:
        - Water Parameter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the water parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                measurement_time:
                  type: string
                  format: date-time
      responses:
        "200":
          description: Water parameter updated successfully
        "404":
          description: Water parameter not found
        "500":
          description: Internal server error

    delete:
      summary: Delete water parameter by ID
      tags:
        - Water Parameter
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the water parameter
      responses:
        "200":
          description: Water parameter deleted successfully
        "404":
          description: Water parameter not found
        "500":
          description: Internal server error

  /admin/shopmanager/create:
    post:
      summary: Create Role SHOP
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        201:
          description: SHOP registered successfully
        400:
          description: Validation error
        409:
          description: Email already exists
        500:
          description: Server error

  /pond/{id}/water-info:
    get:
      tags:
        - Pond
      security:
        - bearerAuth: []
      summary: Retrieve water parameters for a specific pond
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the pond
          schema:
            type: integer
      responses:
        '200':
          description: A list of water parameters for the specified pond
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WaterParameter'
        '404':
          description: Pond not found

    post:
      tags:
        - Water Parameters
      security:
        - bearerAuth: []
      summary: Create new water parameters for a specific pond
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the pond
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/WaterParameterInput'
      responses:
        '201':
          description: Water parameters created successfully
        '400':
          description: Invalid input

  /pond/{id}/water-info/{paramId}:
    put:
      tags:
        - Pond
      security:
        - bearerAuth: []
      summary: Update water parameters for a specific pond
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the pond
          schema:
            type: integer
        - name: paramId
          in: path
          required: true
          description: ID of the water parameter
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaterParameterInput'
      responses:
        '200':
          description: Water parameter updated successfully
        '404':
          description: Water parameter or pond not found

    delete:
      tags:
        - Pond
      summary: Delete water parameters for a specific pond
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the pond
          schema:
            type: integer
        - name: paramId
          in: path
          required: true
          description: ID of the water parameter
          schema:
            type: integer
      responses:
        '204':
          description: Water parameter deleted successfully
        '404':
          description: Water parameter or pond not found       

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Koi:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string
        body_shape:
          type: string
        age:
          type: integer
        size:
          type: number
          format: float
        weight:
          type: number
          format: float
        gender:
          type: string
        breed:
          type: string
        origin:
          type: string
        pond_id:
          type: integer

    KoiWithOwner:
      allOf:
        - $ref: "#/components/schemas/Koi"
        - type: object
          properties:
            owner:
              type: string
              description: Username of the koi's owner

    Pond:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string
        size:
          type: number
          format: float
        depth:
          type: number
          format: float
        volume:
          type: number
          format: float
        num_of_drains:
          type: integer
        pump_capacity:
          type: number
          format: float
        user_id:
          type: integer

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        quantity:
          type: integer


    NewsBlog:
      type: object
      properties:
        id:
          type: integer
        image:
          type: string
        title:
          type: string
        content:
          type: string
        date_published:
          type: string
          format: date-time
        user_id:
          type: integer

    WaterParameter:
      type: object
      properties:
        id:
          type: integer
        temt:
          type: number
        ph:
          type: number
        salinity:
          type: number
        o2:
          type: number
        no2:
          type: number
        no3:
          type: number
        no4:
          type: number

    WaterParameterInput:
      type: object
      properties:
        date:
          type: string
          format: date
        temt:
          type: number
        ph:
          type: number
        salinity:
          type: number
        o2:
          type: number
        no2:
          type: number
        no3:
          type: number
        no4:
          type: number
