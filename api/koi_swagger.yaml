openapi: 3.0.1
info:
  title: Koi Care API
  description: API documentation for your web application
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password

                password_confirm:
                  type: string
                  format: password
                role_id:
                  type: integer
                  description: ID of the role
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad Request (e.g., missing fields, passwords don't match)
        "500":
          description: Internal Server Error

  /auth/login:
    post:
      summary: Login an existing user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      role_id:
                        type: integer
        "400":
          description: Bad Request (e.g., missing fields)
        "401":
          description: Unauthorized (invalid credentials)
        "500":
          description: Internal Server Error

  /auth/profile/{userId}:
    get:
      summary: View user profile
      tags:
        - Profile
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
                      role_id:
                        type: integer
        "401":
          description: Unauthorized (missing or invalid token)
        "403":
          description: Forbidden (user not authorized to view this profile)
        "404":
          description: User not found
        "500":
          description: Internal Server Error

    put:
      summary: Update user profile
      tags:
        - Profile
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email

      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile updated successfully
        "401":
          description: Unauthorized (missing or invalid token)
        "403":
          description: Forbidden (user not authorized to update this profile)
        "404":
          description: User not found
        "500":
          description: Internal Server Error

  /role/{id}:
    get:
      summary: Get role by ID
      tags:
        - Role
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the role
      responses:
        "200":
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
        "404":
          description: Role not found

    put:
      summary: Update role by ID
      tags:
        - Role
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Role updated successfully
        "404":
          description: Role not found

  /koi:
    get:
      summary: Get all koi
      tags:
        - Koi
      responses:
        "200":
          description: A list of all koi
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    image:
                      type: string
                    body_shape:
                      type: string
                    age:
                      type: integer
                    size:
                      type: number
                      format: float
                    weight:
                      type: number
                      format: float
                    gender:
                      type: string
                    breed:
                      type: string
                    origin:
                      type: string
                    selling_price:
                      type: number
                      format: float
                    pond_id:
                      type: integer

  /koi/{id}:
    get:
      summary: Get koi by ID
      tags:
        - Koi
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi
      responses:
        "200":
          description: Koi retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  image:
                    type: string
                  body_shape:
                    type: string
                  age:
                    type: integer
                  size:
                    type: number
                    format: float
                  weight:
                    type: number
                    format: float
                  gender:
                    type: string
                  breed:
                    type: string
                  origin:
                    type: string
                  selling_price:
                    type: number
                    format: float
                  pond_id:
                    type: integer
        "404":
          description: Koi not found

    put:
      summary: Update koi by ID
      tags:
        - Koi
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                body_shape:
                  type: string
                age:
                  type: integer
                size:
                  type: number
                  format: float
                weight:
                  type: number
                  format: float
                gender:
                  type: string
                breed:
                  type: string
                origin:
                  type: string
                selling_price:
                  type: number
                  format: float
                pond_id:
                  type: integer
      responses:
        "200":
          description: Koi updated successfully
        "404":
          description: Koi not found

    delete:
      summary: Delete koi by ID
      tags:
        - Koi
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi
      responses:
        "200":
          description: Koi deleted successfully
        "404":
          description: Koi not found

  /koiGrowth/{id}:
    get:
      summary: Get koi growth record by ID
      tags:
        - Koi Growth
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi growth record
      responses:
        "200":
          description: Koi growth record retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  growth_date:
                    type: string
                    format: date
                  age:
                    type: integer
                  size:
                    type: number
                    format: float
                  weight:
                    type: number
                    format: float
                  koi_id:
                    type: integer
        "404":
          description: Koi growth record not found

    put:
      summary: Update koi growth record by ID
      tags:
        - Koi Growth
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the koi growth record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                growth_date:
                  type: string
                  format: date
                age:
                  type: integer
                size:
                  type: number
                  format: float
                weight:
                  type: number
                  format: float
      responses:
        "200":
          description: Koi growth record updated successfully
        "404":
          description: Koi growth record not found

  /pond:
    get:
      summary: Get all ponds
      tags:
        - Pond
      responses:
        "200":
          description: A list of all ponds
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    image:
                      type: string
                    size:
                      type: number
                      format: float
                    depth:
                      type: number
                      format: float
                    volume:
                      type: number
                      format: float
                    num_of_drains:
                      type: integer
                    pump_capacity:
                      type: number
                      format: float
                    user_id:
                      type: integer

  /pond/{id}:
    get:
      summary: Get pond by ID
      tags:
        - Pond
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the pond
      responses:
        "200":
          description: Pond retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  image:
                    type: string
                  size:
                    type: number
                    format: float
                  depth:
                    type: number
                    format: float
                  volume:
                    type: number
                    format: float
                  num_of_drains:
                    type: integer
                  pump_capacity:
                    type: number
                    format: float
                  user_id:
                    type: integer
        "404":
          description: Pond not found

    put:
      summary: Update pond by ID
      tags:
        - Pond
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the pond
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                size:
                  type: number
                  format: float
                depth:
                  type: number
                  format: float
                volume:
                  type: number
                  format: float
                num_of_drains:
                  type: integer
                pump_capacity:
                  type: number
                  format: float
      responses:
        "200":
          description: Pond updated successfully
        "404":
          description: Pond not found

    delete:
      summary: Delete pond by ID
      tags:
        - Pond
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the pond
      responses:
        "200":
          description: Pond deleted successfully
        "404":
          description: Pond not found

  /product:
    get:
      summary: Get all products
      tags:
        - Product
      responses:
        "200":
          description: A list of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    description:
                      type: string
                    price:
                      type: number
                      format: float
                    quantity:
                      type: integer

  /product/{id}:
    get:
      summary: Get product by ID
      tags:
        - Product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the product
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  price:
                    type: number
                    format: float
                  quantity:
                    type: integer
        "404":
          description: Product not found

    put:
      summary: Update product by ID
      tags:
        - Product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                quantity:
                  type: integer
      responses:
        "200":
          description: Product updated successfully
        "404":
          description: Product not found

    delete:
      summary: Delete product by ID
      tags:
        - Product
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the product
      responses:
        "200":
          description: Product deleted successfully
        "404":
          description: Product not found

  /waterValue:
    get:
      summary: Get all water parameter values
      tags:
        - Water Value
      responses:
        "200":
          description: A list of all water parameter values
          content:
            application/json:
              schema:
                type: array
                items:               
                  type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  param_value:
                    type: number
                    format: float
                  water_parameters_id:
                    type: integer

  /waterValue/{id}/{name}:
    get:
      summary: Get water parameter value by ID and name
      tags:
        - Water Value
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the water parameter
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the water parameter value
      responses:
          "200":
            description: Water parameter value retrieved successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    param_value: 
                      type: number
                  format: float
          "404":
            description: Water parameter value not found

    put:
      summary: Update water parameter value by ID and name
      tags:
        - Water Value
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the water parameter
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the water parameter value  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                param_value:
                  type: number
                  format: float
      responses:
        '200':
          description: Water parameter value updated successfully
        '404':
          description: Water parameter value not found

    delete:
      summary: Delete water parameter value by ID and name
      tags:
        - Water Value
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID of the water parameter
      - in: path
        name: name
        schema:
          type: string
        required: true
        description: Name of the water parameter value
      responses:
        "200":
          description: Water parameter value deleted successfully
        "404":
          description: Water parameter value not found

  /order:
    post:
      summary: Create a new order
      tags:
        - Order
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:  
              type: object
              properties:
                orderItems:
                  type: array
                items:
                  type: object
                  properties: 
                    product_id:
                      type: integer
                    quantity:
                      type: integer
                    price:
                      type: number
                      format: float
                totalAmount:
                  type: number
                  format: float
      responses:
        '201':
          description: Order created successfully
        '500':
          description: Internal server error

  /order/{id}:
    get:
      summary: Get order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the order
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: integer
                  user_id:
                    type: integer
                  order_date:
                    type: string
                    format: date-time
                  total_amount:
                    type: number
                    format: float
                  status:
                    type: string
                    enum: [pending, processing, shipped, delivered, cancelled]
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: integer
                        name:
                          type: string
                        price:
                          type: number
                          format: float
                        quantity:
                          type: integer
        '404':
          description: Order not found

    put:
      summary: Update order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderItems:
                  type: array
                  items:
                    type: object
                    properties:  
                      product_id:
                        type: integer
                      quantity:
                        type: integer
                      price:
                        type: number
                        format: float
                totalAmount:
                  type: number
                  format: float
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
      responses:
        '200':
          description: Order updated successfully
        '404':
          description: Order not found

    delete:
      summary: Delete order by ID
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the order
      responses:
        '200':
          description: Order deleted successfully
        '404':
          description: Order not found

  /newsBlog:
    get:
      summary: Get all news blogs
      tags:
        - NewsBlog
      responses:
        '200':
          description: A list of all news blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    image:
                      type: string
                    title:
                      type: string
                    content:
                      type: string
                    date_published:
                      type: string
                      format: date-time
                    user_id:
                      type: integer

  /newsBlog/{id}:
    get:
      summary: Get news blog by ID
      tags:
        - NewsBlog
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the news blog
      responses:
        '200':
          description: News blog retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  image:
                    type: string
                  title:
                    type: string
                  content:
                    type: string
                  date_published:
                    type: string
                    format: date-time
                  user_id:
                    type: integer
        '404':
          description: News blog not found

    put:
      summary: Update news blog by ID
      tags:
        - NewsBlog
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the news blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                title:
                  type: string
                content:
                  type: string
                date_published:
                  type: string
                  format: date-time
      responses:
        '200':
          description: News blog updated successfully
        '404':
          description: News blog not found

    delete:
      summary: Delete news blog by ID
      tags:
        - NewsBlog
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the news blog
      responses:
        '200':
          description: News blog deleted successfully
        '404':
          description: News blog not found

  /cart:
    get:
      summary: Get cart by user ID
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:  
                  cart_id:
                    type: integer
                  user_id:
                    type: integer
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        product_id:
                          type: integer
                        name:
                          type: string
                        price:
                          type: number
                          format: float
                        quantity:
                          type: integer
        '500':
          description: Internal server error

    post:
      summary: Add item to cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:  
                  type: integer
                quantity:
                  type: integer
      responses:
        '201':
          description: Item added to cart
        '500':
          description: Internal server error

  /cart/{productId}:
    put:
      summary: Update item quantity in cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: ID of the product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Cart item quantity updated
        '500':
          description: Internal server error

    delete:
      summary: Remove item from cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: ID of the product
      responses:
        '200':
          description: Item removed from cart
        '500':
          description: Internal server error
        

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
